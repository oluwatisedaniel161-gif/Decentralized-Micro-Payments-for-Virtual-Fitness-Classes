(define-constant CONTRACT_OWNER tx-sender)
(define-constant ERR_NOT_AUTHORIZED (err u100))
(define-constant ERR_INVALID_CLASS (err u101))
(define-constant ERR_INSUFFICIENT_FUNDS (err u102))
(define-constant ERR_PAYMENT_FAILED (err u103))
(define-constant ERR_INVALID_AMOUNT (err u104))
(define-constant ERR_CLASS_NOT_ACTIVE (err u105))
(define-constant ERR_ALREADY_PAID (err u106))
(define-constant ERR_FEE_TRANSFER_FAILED (err u107))
(define-constant ERR_INSTRUCTOR_TRANSFER_FAILED (err u108))
(define-constant ERR_INVALID_FEE_PERCENT (err u109))
(define-constant ERR_NO_FEE_VAULT (err u110))
(define-constant ERR_NO_CLASS_REGISTRY (err u111))
(define-constant ERR_INVALID_TIMESTAMP (err u112))
(define-constant ERR_PAYMENT_EXPIRED (err u113))
(define-constant ERR_REFUND_FAILED (err u114))
(define-constant ERR_DISPUTE_OPEN (err u115))
(define-constant ERR_NO_PAYMENT_FOUND (err u116))
(define-constant ERR_INVALID_REFUND_AMOUNT (err u117))
(define-constant ERR_ONLY_INSTRUCTOR (err u118))
(define-constant ERR_ONLY_PARTICIPANT (err u119))
(define-constant ERR_PLATFORM_FEE_ZERO (err u120))
(define-constant ERR_MAX_PAYMENTS_EXCEEDED (err u121))
(define-constant ERR_INVALID_CURRENCY (err u122))
(define-constant ERR_DISPUTE_NOT_ALLOWED (err u123))
(define-constant ERR_RESOLVE_FAILED (err u124))
(define-constant ERR_INVALID_DISPUTE_REASON (err u125))
(define-constant PLATFORM_FEE_PERCENT u2)
(define-constant MAX_PAYMENTS_PER_CLASS u100)
(define-constant DISPUTE_WINDOW u144)
(define-data-var fee-vault-address principal 'SP000000000000000000002Q6VF78)
(define-data-var class-registry-address principal 'SP000000000000000000002Q6VF78)
(define-data-var next-payment-id uint u0)
(define-data-var total-fees-collected uint u0)
(define-data-var total-payments-processed uint u0)
(define-data-var platform-fee-percent uint PLATFORM_FEE_PERCENT)
(define-data-var max-payments uint u10000)
(define-map Payments
  { payment-id: uint }
  { class-id: uint, participant: principal, amount: uint, timestamp: uint, instructor: principal, status: (string-ascii 20), currency: (string-ascii 10), refunded: bool })
(define-map PaymentsByClass
  { class-id: uint }
  (list 100 uint))
(define-map Disputes
  { payment-id: uint }
  { reason: (string-utf8 200), timestamp: uint, resolved: bool, resolver: principal, outcome: (string-ascii 20) })
(define-map PaymentCountsByClass
  { class-id: uint }
  uint)
(define-read-only (get-payment (payment-id uint))
  (map-get? Payments { payment-id: payment-id }))
(define-read-only (get-dispute (payment-id uint))
  (map-get? Disputes { payment-id: payment-id }))
(define-read-only (get-payments-for-class (class-id uint))
  (map-get? PaymentsByClass { class-id: class-id }))
(define-read-only (get-payment-count-for-class (class-id uint))
  (default-to u0 (map-get? PaymentCountsByClass { class-id: class-id })))
(define-read-only (get-total-fees)
  (ok (var-get total-fees-collected)))
(define-read-only (get-total-payments)
  (ok (var-get total-payments-processed)))
(define-read-only (get-platform-fee-percent)
  (ok (var-get platform-fee-percent)))
(define-read-only (is-payment-paid (class-id uint) (participant principal))
  (is-some (index-of? (default-to (list) (map-get? PaymentsByClass { class-id: class-id })) (unwrap-panic (fold find-payment-id (unwrap-panic (map-get? PaymentsByClass { class-id: class-id })) (ok u0))))))
(define-private (find-payment-id (payment-id uint) (acc (response uint bool)))
  (match acc
    val (if (is-eq (get participant (unwrap-panic (map-get? Payments { payment-id: payment-id }))) participant) (ok payment-id) acc)
    acc))
(define-private (validate-amount (amount uint) (class-price uint))
  (if (is-eq amount class-price) (ok true) (err ERR_INVALID_AMOUNT)))
(define-private (validate-class-active (status bool))
  (if status (ok true) (err ERR_CLASS_NOT_ACTIVE)))
(define-private (validate-not-already-paid (class-id uint) (participant principal))
  (if (is-none (fold find-existing-payment (default-to (list) (map-get? PaymentsByClass { class-id: class-id })) none)) (ok true) (err ERR_ALREADY_PAID)))
(define-private (find-existing-payment (payment-id uint) (acc (optional uint)))
  (match acc
    val acc
    (if (is-eq (get participant (unwrap-panic (map-get? Payments { payment-id: payment-id }))) participant) (some payment-id) acc)))
(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height) (ok true) (err ERR_INVALID_TIMESTAMP)))
(define-private (validate-currency (cur (string-ascii 10)))
  (if (is-eq cur "STX") (ok true) (err ERR_INVALID_CURRENCY)))
(define-private (validate-dispute-reason (reason (string-utf8 200)))
  (if (> (len reason) u0) (ok true) (err ERR_INVALID_DISPUTE_REASON)))
(define-private (calculate-fee (amount uint))
  (/ (* amount (var-get platform-fee-percent)) u100))
(define-private (transfer-fee (fee uint))
  (match (stx-transfer? fee tx-sender (var-get fee-vault-address))
    success (ok true)
    error (err ERR_FEE_TRANSFER_FAILED)))
(define-private (transfer-to-instructor (net-amount uint) (instructor principal))
  (match (stx-transfer? net-amount tx-sender instructor)
    success (ok true)
    error (err ERR_INSTRUCTOR_TRANSFER_FAILED)))
(define-public (set-fee-vault-address (new-address principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (var-set fee-vault-address new-address)
    (ok true)))
(define-public (set-class-registry-address (new-address principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (var-set class-registry-address new-address)
    (ok true)))
(define-public (set-platform-fee-percent (new-percent uint))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (asserts! (and (> new-percent u0) (<= new-percent u10)) (err ERR_INVALID_FEE_PERCENT))
    (var-set platform-fee-percent new-percent)
    (ok true)))
(define-public (pay-for-class (class-id uint) (currency (string-ascii 10)))
  (let ((class-details (unwrap! (contract-call? (var-get class-registry-address) get-class-details class-id) (err ERR_INVALID_CLASS)))
        (class-price (get price class-details))
        (instructor (get instructor class-details))
        (class-status (get active class-details))
        (class-start-time (get start-time class-details))
        (payment-id (var-get next-payment-id))
        (payment-count (get-payment-count-for-class class-id)))
    (try! (validate-currency currency))
    (try! (validate-class-active class-status))
    (try! (validate-not-already-paid class-id tx-sender))
    (try! (validate-timestamp class-start-time))
    (asserts! (< payment-count MAX_PAYMENTS_PER_CLASS) (err ERR_MAX_PAYMENTS_EXCEEDED))
    (let ((fee (calculate-fee class-price))
          (net-amount (- class-price fee)))
      (try! (transfer-fee fee))
      (try! (transfer-to-instructor net-amount instructor))
      (map-set Payments { payment-id: payment-id }
        { class-id: class-id, participant: tx-sender, amount: class-price, timestamp: block-height, instructor: instructor, status: "paid", currency: currency, refunded: false })
      (map-set PaymentsByClass { class-id: class-id } (append (default-to (list) (map-get? PaymentsByClass { class-id: class-id })) payment-id))
      (map-set PaymentCountsByClass { class-id: class-id } (+ payment-count u1))
      (var-set next-payment-id (+ payment-id u1))
      (var-set total-fees-collected (+ (var-get total-fees-collected) fee))
      (var-set total-payments-processed (+ (var-get total-payments-processed) u1))
      (print { event: "payment-processed", payment-id: payment-id, class-id: class-id, amount: class-price })
      (ok payment-id))))
(define-public (refund-payment (payment-id uint) (refund-amount uint))
  (let ((payment (unwrap! (map-get? Payments { payment-id: payment-id }) (err ERR_NO_PAYMENT_FOUND)))
        (participant (get participant payment))
        (instructor (get instructor payment))
        (amount (get amount payment))
        (status (get status payment)))
    (asserts! (is-eq tx-sender instructor) (err ERR_ONLY_INSTRUCTOR))
    (asserts! (is-eq status "paid") (err ERR_INVALID_STATUS))
    (asserts! (<= refund-amount amount) (err ERR_INVALID_REFUND_AMOUNT))
    (asserts! (is-none (map-get? Disputes { payment-id: payment-id })) (err ERR_DISPUTE_OPEN))
    (match (stx-transfer? refund-amount instructor participant)
      success (begin
        (map-set Payments { payment-id: payment-id } (merge payment { status: "refunded", refunded: true }))
        (print { event: "payment-refunded", payment-id: payment-id, amount: refund-amount })
        (ok true))
      error (err ERR_REFUND_FAILED))))
(define-public (file-dispute (payment-id uint) (reason (string-utf8 200)))
  (let ((payment (unwrap! (map-get? Payments { payment-id: payment-id }) (err ERR_NO_PAYMENT_FOUND)))
        (timestamp (get timestamp payment)))
    (asserts! (is-eq tx-sender (get participant payment)) (err ERR_ONLY_PARTICIPANT))
    (asserts! (< (- block-height timestamp) DISPUTE_WINDOW) (err ERR_DISPUTE_NOT_ALLOWED))
    (try! (validate-dispute-reason reason))
    (map-set Disputes { payment-id: payment-id }
      { reason: reason, timestamp: block-height, resolved: false, resolver: 'SP000000000000000000002Q6VF78, outcome: "pending" })
    (print { event: "dispute-filed", payment-id: payment-id })
    (ok true)))
(define-public (resolve-dispute (payment-id uint) (outcome (string-ascii 20)) (refund-amount uint))
  (let ((dispute (unwrap! (map-get? Disputes { payment-id: payment-id }) (err ERR_NO_DISPUTE)))
        (payment (unwrap! (map-get? Payments { payment-id: payment-id }) (err ERR_NO_PAYMENT_FOUND)))
        (instructor (get instructor payment))
        (participant (get participant payment))
        (amount (get amount payment)))
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (asserts! (not (get resolved dispute)) (err ERR_ALREADY_RESOLVED))
    (asserts! (or (is-eq outcome "refund") (is-eq outcome "no-refund")) (err ERR_INVALID_OUTCOME))
    (if (is-eq outcome "refund")
        (begin
          (asserts! (<= refund-amount amount) (err ERR_INVALID_REFUND_AMOUNT))
          (match (stx-transfer? refund-amount instructor participant)
            success (begin
              (map-set Payments { payment-id: payment-id } (merge payment { status: "disputed-refunded", refunded: true }))
              (ok true))
            error (err ERR_REFUND_FAILED)))
        (ok true))
    (map-set Disputes { payment-id: payment-id } (merge dispute { resolved: true, resolver: tx-sender, outcome: outcome }))
    (print { event: "dispute-resolved", payment-id: payment-id, outcome: outcome })
    (ok true)))