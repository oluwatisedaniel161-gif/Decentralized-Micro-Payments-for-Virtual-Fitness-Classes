(define-constant CONTRACT_OWNER tx-sender)
(define-constant ERR_NOT_AUTHORIZED (err u100))
(define-constant ERR_CLASS_NOT_FOUND (err u101))
(define-constant ERR_PARTICIPANT_NOT_FOUND (err u102))
(define-constant ERR_ALREADY_CHECKED_IN (err u103))
(define-constant ERR_CHECKIN_WINDOW_CLOSED (err u104))
(define-constant ERR_INVALID_CLASS_ID (err u105))
(define-constant ERR_INVALID_PARTICIPANT (err u106))
(define-constant ERR_MAX_ATTENDANCE_EXCEEDED (err u107))
(define-constant ERR_CHECKOUT_NOT_ALLOWED (err u108))
(define-constant ERR_NOT_INSTRUCTOR (err u109))
(define-constant CHECKIN_WINDOW u30)
(define-constant MAX_ATTENDANCE_PER_CLASS u500)
(define-data-var class-registry-address principal 'SP000000000000000000002Q6VF78)
(define-data-var payment-processor-address principal 'SP000000000000000000002Q6VF78)
(define-data-var next-attendance-id uint u0)
(define-map Attendance
  { attendance-id: uint }
  { class-id: uint, participant: principal, checkin-time: uint, checkout-time: (optional uint), status: (string-ascii 12) })
(define-map AttendanceByClass
  { class-id: uint }
  (list 500 uint))
(define-map AttendanceByParticipant
  { participant: principal, class-id: uint }
  uint)
(define-map ClassAttendanceCount
  { class-id: uint }
  uint)
(define-read-only (get-attendance (attendance-id uint))
  (map-get? Attendance { attendance-id: attendance-id }))
(define-read-only (get-attendance-by-participant (participant principal) (class-id uint))
  (map-get? AttendanceByParticipant { participant: participant, class-id: class-id }))
(define-read-only (get-attendance-for-class (class-id uint))
  (default-to (list) (map-get? AttendanceByClass { class-id: class-id })))
(define-read-only (get-class-attendance-count (class-id uint))
  (default-to u0 (map-get? ClassAttendanceCount { class-id: class-id })))
(define-read-only (has-checked-in (participant principal) (class-id uint))
  (is-some (map-get? AttendanceByParticipant { participant: participant, class-id: class-id })))
(define-private (validate-class-exists (class-id uint))
  (match (contract-call? (var-get class-registry-address) get-class class-id)
    class (ok true)
    (err ERR_CLASS_NOT_FOUND)))
(define-private (validate-payment-exists (class-id uint) (participant principal))
  (let ((payment-id (default-to u0 (map-get? AttendanceByParticipant { participant: participant, class-id: class-id }))))
    (if (> payment-id u0)
      (ok true)
      (err ERR_PARTICIPANT_NOT_FOUND))))
(define-private (validate-checkin-window (start-time uint))
  (if (and (>= block-height start-time) (<= block-height (+ start-time CHECKIN_WINDOW)))
    (ok true)
    (err ERR_CHECKIN_WINDOW_CLOSED)))
(define-private (validate-not-already-checked-in (participant principal) (class-id uint))
  (if (not (has-checked-in participant class-id))
    (ok true)
    (err ERR_ALREADY_CHECKED_IN)))
(define-private (validate-attendance-limit (class-id uint))
  (let ((current-count (get-class-attendance-count class-id)))
    (if (< current-count MAX_ATTENDANCE_PER_CLASS)
      (ok true)
      (err ERR_MAX_ATTENDANCE_EXCEEDED))))
(define-private (validate-instructor (class-id uint))
  (let ((class (unwrap! (contract-call? (var-get class-registry-address) get-class class-id) (err ERR_CLASS_NOT_FOUND))))
    (if (is-eq tx-sender (get instructor class))
      (ok true)
      (err ERR_NOT_INSTRUCTOR))))
(define-public (set-class-registry-address (new-address principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (var-set class-registry-address new-address)
    (ok true)))
(define-public (set-payment-processor-address (new-address principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_NOT_AUTHORIZED))
    (var-set payment-processor-address new-address)
    (ok true)))
(define-public (checkin (class-id uint))
  (let ((class (unwrap! (contract-call? (var-get class-registry-address) get-class class-id) (err ERR_CLASS_NOT_FOUND)))
        (start-time (get start-time class))
        (attendance-id (var-get next-attendance-id))
        (current-count (get-class-attendance-count class-id)))
    (try! (validate-checkin-window start-time))
    (try! (validate-not-already-checked-in tx-sender class-id))
    (try! (validate-attendance-limit class-id))
    (map-set Attendance { attendance-id: attendance-id }
      { class-id: class-id, participant: tx-sender, checkin-time: block-height, checkout-time: none, status: "checked-in" })
    (map-set AttendanceByClass { class-id: class-id }
      (unwrap! (as-max-len? (append (default-to (list) (map-get? AttendanceByClass { class-id: class-id })) attendance-id) u500) (err ERR_MAX_ATTENDANCE_EXCEEDED)))
    (map-set AttendanceByParticipant { participant: tx-sender, class-id: class-id } attendance-id)
    (map-set ClassAttendanceCount { class-id: class-id } (+ current-count u1))
    (var-set next-attendance-id (+ attendance-id u1))
    (print { event: "checkin", attendance-id: attendance-id, class-id: class-id, participant: tx-sender })
    (ok attendance-id)))
(define-public (checkout (attendance-id uint))
  (let ((record (unwrap! (map-get? Attendance { attendance-id: attendance-id }) (err ERR_PARTICIPANT_NOT_FOUND)))
        (status (get status record)))
    (asserts! (is-eq tx-sender (get participant record)) (err ERR_NOT_AUTHORIZED))
    (asserts! (is-eq status "checked-in") (err ERR_CHECKOUT_NOT_ALLOWED))
    (map-set Attendance { attendance-id: attendance-id }
      (merge record { checkout-time: (some block-height), status: "completed" }))
    (print { event: "checkout", attendance-id: attendance-id, participant: tx-sender })
    (ok true)))
(define-public (mark-no-show (attendance-id uint))
  (let ((record (unwrap! (map-get? Attendance { attendance-id: attendance-id }) (err ERR_PARTICIPANT_NOT_FOUND)))
        (class-id (get class-id record)))
    (try! (validate-instructor class-id))
    (asserts! (is-eq (get status record) "checked-in") (err ERR_CHECKOUT_NOT_ALLOWED))
    (map-set Attendance { attendance-id: attendance-id }
      (merge record { status: "no-show" }))
    (print { event: "no-show", attendance-id: attendance-id, participant: (get participant record) })
    (ok true)))